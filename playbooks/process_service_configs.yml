---
# Process configuration files for a single service
# item.key = service name (e.g., "copyparty", "traefik")
# item.value = service configuration

# === Traefik-specific handling ===
- block:
    - name: "Render Traefik static configuration"
      template:
        src: "../configs/traefik/traefik.yml"
        dest: "{{ item.value.config_path }}/traefik.yml"
        mode: '0644'

    - name: "Create Traefik acme.json file"
      file:
        path: "{{ services.traefik.data_path }}/acme.json"
        state: touch
        mode: '0600'
        owner: "{{ user_id }}"
        group: "{{ group_id }}"
      become: yes

    - name: "Find Traefik dynamic config files"
      find:
        paths: "../configs/traefik/dynamic"
        patterns: "*"
        excludes: "*.example,.gitkeep"
        file_type: file
        recurse: yes
      register: traefik_dynamic_files
      failed_when: false

    - name: "Copy Traefik dynamic config files"
      copy:
        src: "{{ config_file.path }}"
        dest: "{{ item.value.config_path }}/dynamic/{{ config_file.path | basename }}"
        mode: '0644'
      loop: "{{ traefik_dynamic_files.files }}"
      loop_control:
        loop_var: config_file
      when: traefik_dynamic_files.files is defined and traefik_dynamic_files.files | length > 0
  when: item.key == 'traefik'

# === Generic config processing for all non-Traefik services ===
- name: "Find .j2 template files for {{ item.key }}"
  find:
    paths: "../configs/{{ item.key }}"
    patterns: "*.j2"
    file_type: file
    recurse: yes
  register: j2_files
  failed_when: false
  when: item.key != 'traefik'

- name: "Find regular config files for {{ item.key }}"
  find:
    paths: "../configs/{{ item.key }}"
    patterns: "*"
    excludes: "*.j2,*.example,.gitkeep"
    file_type: file
    recurse: yes
  register: regular_files
  failed_when: false
  when: item.key != 'traefik'

- name: "Render .j2 template files for {{ item.key }}"
  template:
    src: "{{ config_file.path }}"
    dest: "{{ item.value.config_path }}/{{ config_file.path | regex_replace('^.*/configs/' + item.key + '/', '') | regex_replace('\\.j2$', '') }}"
    mode: '0644'
  loop: "{{ j2_files.files }}"
  loop_control:
    loop_var: config_file
  when: j2_files.files is defined and j2_files.files | length > 0

- name: "Copy regular config files for {{ item.key }}"
  copy:
    src: "{{ config_file.path }}"
    dest: "{{ item.value.config_path }}/{{ config_file.path | regex_replace('^.*/configs/' + item.key + '/', '') }}"
    mode: '0644'
  loop: "{{ regular_files.files }}"
  loop_control:
    loop_var: config_file
  when: regular_files.files is defined and regular_files.files | length > 0
